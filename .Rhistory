# Chunk 16
summary(egarch_model$roll.pred$realized_vol-
egarch_model$roll.pred$egarch.predicted_vol)
# Chunk 17
library(lubridate)
plot( x= ymd(egarch_model$roll.pred$x),
y= egarch_model$roll.pred$realized_vol- egarch_model$roll.pred$egarch.predicted_vol,
type= 'p',
pch='.',
xlab= 'date',
ylab='',
main='ARMA(2,0)-EGARCH(1,1) prediction error')
# Chunk 18
egarch_model$MSE
# Chunk 19
load('rgarch_model')
rgarch_model$spec
# Chunk 20
rgarch_model$plot
# Chunk 21
cor( rgarch_model$roll.pred$realized_vol, rgarch_model$roll.pred$rgarch.prediction_vol)
# Chunk 22
summary(rgarch_model$roll.pred$realized_vol-
rgarch_model$roll.pred$arfima_egarch.predicted_vol)
plot( x= ymd(rgarch_model$roll.pred$x),
y= rgarch_model$roll.pred$realized_vol- rgarch_model$roll.pred$rgarch.prediction_vol,
type= 'p',
pch='.',
xlab= 'date',
ylab='',
main='realGARCH prediction error')
# Chunk 23
rgarch_model$MSE
# Chunk 24
acf( SPXdata$SPX2.rvol, lag= 300)
# Chunk 25
adf.test(SPXdata$SPX2.rvol)
kpss.test(SPXdata$SPX2.rvol, null= 'Level')
# Chunk 26
load('arfima_egarch_model')
arfima_egarch_model$spec
# Chunk 27
arfima_egarch_model$plot
# Chunk 28
cor( arfima_egarch_model$roll.pred$realized_vol, arfima_egarch_model$roll.pred$arfima_egarch.predicted_vol)
# Chunk 29
summary(arfima_egarch_model$roll.pred$realized_vol-
arfima_egarch_model$roll.pred$arfima_egarch.predicted_vol)
plot( x= ymd(arfima_egarch_model$roll.pred$x),
y= arfima_egarch_model$roll.pred$realized_vol- arfima_egarch_model$roll.pred$arfima_egarch.predicted_vol,
type= 'p',
pch='.',
xlab= 'date',
ylab='',
main='ARFIMA(0,d,0)-EGARCH(1,1) prediction error')
# Chunk 30
arfima_egarch_model$MSE
# Chunk 31
load('rf')
print(rf$model)
# Chunk 32
rf$plot
# Chunk 33
cor(rf$roll.pred$reallized_vol, rf$roll.pred$rf.predicted_vol)
library(rugarch)
# Chunk 1: knitr_init
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# Chunk 2
setwd('/Users/Eric/Desktop/Vol_prediction')
# Chunk 3: setup
opts_chunk$set(dev= 'pdf')
# Chunk 4
library(lubridate)
SPXdata<- read.csv('SPX_rvol.csv')
rownames(SPXdata)<- ymd( SPXdata$DATE)
SPXdata$SPX2.rvol<- sqrt(SPXdata$SPX2.rv)
head( SPXdata)
# Chunk 5
library(ggplot2)
# g<- ggplot(SPXdata, aes(x= DATE, y= SPX2.rvol, group= 1))+
#   geom_line()
# g
plot( x= SPXdata$DATE, y= SPXdata$SPX2.rvol,
type = 'n',
xlab='DATE',
ylab= 'daily realized vol')
lines(SPXdata$DATE, SPXdata$SPX2.rvol)
# Chunk 6
VX<- read.csv('VX.csv')
head(VX)
# Chunk 7
library(tseries)
adf.test( SPXdata$SPX2.r)
# Chunk 8
library(MASS)
t.pars<-fitdistr(SPXdata$SPX2.r, densfun = 't', start= list(m=0,s= 0.01 ,df= 1))
plot(density(SPXdata$SPX2.r), xlim= c(-.1,.1), ylim=c(-1, 55) ,
xlab='',
ylab='',
main='')
par(new=TRUE)
curve( dt( (x- t.pars$estimate[1])/t.pars$estimate[2],
df= t.pars$estimate[3])/ t.pars$estimate[2],
from= -.1,
to= .1, xlim= c(-.1,.1),
ylim=c (-1, 55),
col= 'green',
xlab= 'ret',
ylab= 'density',
main= '')
# Chunk 9
acf(SPXdata$SPX2.r) ## acf plot
# Chunk 10
library(tseries)
Box.test(SPXdata$SPX2.r, type= 'Ljung-Box')
# Chunk 11
library(forecast)
auto.arima(SPXdata$SPX2.r)
# Chunk 12
load('egarch_model')
# Chunk 13
egarch_model$spec
# Chunk 14
egarch_model$plot
# Chunk 15
cor( egarch_model$roll.pred$realized_vol, egarch_model$roll.pred$egarch.predicted_vol)
# Chunk 16
summary(egarch_model$roll.pred$realized_vol-
egarch_model$roll.pred$egarch.predicted_vol)
# Chunk 17
library(lubridate)
plot( x= ymd(egarch_model$roll.pred$x),
y= egarch_model$roll.pred$realized_vol- egarch_model$roll.pred$egarch.predicted_vol,
type= 'p',
pch='.',
xlab= 'date',
ylab='',
main='ARMA(2,0)-EGARCH(1,1) prediction error')
# Chunk 18
egarch_model$MSE
# Chunk 19
load('rgarch_model')
rgarch_model$spec
# Chunk 20
rgarch_model$plot
# Chunk 21
cor( rgarch_model$roll.pred$realized_vol, rgarch_model$roll.pred$rgarch.prediction_vol)
# Chunk 22
summary(rgarch_model$roll.pred$realized_vol-
rgarch_model$roll.pred$arfima_egarch.predicted_vol)
plot( x= ymd(rgarch_model$roll.pred$x),
y= rgarch_model$roll.pred$realized_vol- rgarch_model$roll.pred$rgarch.prediction_vol,
type= 'p',
pch='.',
xlab= 'date',
ylab='',
main='realGARCH prediction error')
# Chunk 23
rgarch_model$MSE
# Chunk 24
acf( SPXdata$SPX2.rvol, lag= 300)
# Chunk 25
adf.test(SPXdata$SPX2.rvol)
kpss.test(SPXdata$SPX2.rvol, null= 'Level')
# Chunk 26
load('arfima_egarch_model')
arfima_egarch_model$spec
# Chunk 27
arfima_egarch_model$plot
# Chunk 28
cor( arfima_egarch_model$roll.pred$realized_vol, arfima_egarch_model$roll.pred$arfima_egarch.predicted_vol)
# Chunk 29
summary(arfima_egarch_model$roll.pred$realized_vol-
arfima_egarch_model$roll.pred$arfima_egarch.predicted_vol)
plot( x= ymd(arfima_egarch_model$roll.pred$x),
y= arfima_egarch_model$roll.pred$realized_vol- arfima_egarch_model$roll.pred$arfima_egarch.predicted_vol,
type= 'p',
pch='.',
xlab= 'date',
ylab='',
main='ARFIMA(0,d,0)-EGARCH(1,1) prediction error')
# Chunk 30
arfima_egarch_model$MSE
# Chunk 31
load('rf')
rf$model
# Chunk 32
rf$plot
# Chunk 33
cor(rf$roll.pred$reallized_vol, rf$roll.pred$rf.predicted_vol)
library(randomForest)
load('rf')
library(randomForest)
rf$model$call
varImpPlot(rf$model)
rm(list=ls())
setwd('/Users/Eric/Desktop/Vol_prediction')
load('egarch_model')
load('arfima_egarch_model')
load('rgarch_model')
library(lubridate)
library(xts)
library(zoo)
SPXdata<- read.csv('SPX_rvol.csv')
SPXdata$SPX2.rvol<- sqrt( SPXdata$SPX2.rv)
rownames(SPXdata)<- ymd( SPXdata$DATE)
## VX_lag1 contains the information of implied vol with 1 day lag
VX<- read.csv('VX.csv')
VX$DATE<- ymd(VX$DATE)
rownames(VX)<- ymd(VX$DATE)
VX$DATE<- NULL
VX<- as.xts(VX)
VX_lag1<- lag( VX, 1, na.pad = TRUE)
VX_lag1<- as.data.frame(VX_lag1)
VX_lag1$DATE<- ymd(rownames(VX_lag1))
VX_lag1<- VX_lag1[ complete.cases(VX_lag1), ]
## forecasting is the time series 1 day ahead forecasting
forecasting<- data.frame(DATE=ymd(egarch_model$roll.pred$x),
real= egarch_model$roll.pred$realized_vol,
egarchPred= egarch_model$roll.pred$egarch.predicted_vol,
rgarchPred= rgarch_model$roll.pred$rgarch.prediction_vol,
arfima_egarchPred= arfima_egarch_model$roll.pred$arfima_egarch.predicted_vol)
## combine the VX_lag1 and forecasting
fore_vx<- merge( VX_lag1, forecasting, by='DATE')
fore_vx<- fore_vx[complete.cases(fore_vx),]
rownames(fore_vx)<- ymd(fore_vx$DATE)
fore_vx$DATE<- NULL
fore_vx<- as.xts( fore_vx)
tmp<- list()
tmp$rvol<- fore_vx$real
fore_vx$real<- NULL
tmp$x<- fore_vx
fore_vx<- tmp
## rf ensemble to get an average forecasting ( not successful)
library(randomForest)
# # cv<- rfcv(trainx = fore_vx$x, trainy = fore_vx$rvol, cv.fold = 5)
#
# ensemble_rf<- randomForest(x = fore_vx$x ,
#                            y= fore_vx$rvol,
#                            ntree= 1000,
#                            importance= TRUE)
#
# plot(ensemble_rf)
# varImpPlot(ensemble_rf)
# var_selection<- c( 'rgarchPred',
#                    'arfima_egarchPred',
#                    'VIX.Close',
#                    'egarchPred',
#                    'VIX.Open',
#                    'VX.C5_2',
#                    'VX.C2_1',
#                    'VX.C1_0',
#                    'VX4.OpenInt_lag1',
#                    'VX1.Settle')
# tmp<- fore_vx$x[,  var_selection]
#
# ensemble_rf<- randomForest(x = tmp ,
#                            y= fore_vx$rvol,
#                            ntree= 1000,
#                            importance= TRUE)
#
## rf ensemble the time series forecasting to get an average
ensemble_rf<- randomForest(real~.,
data = forecasting,
ntree= 500,
mtry= 2,
importance= TRUE)
ensemble_rf
plot(ensemble_rf)
ensemble_rf$mse
ensemble_rf$rsq
library(ggplot2)
library(reshape2)
tmp<- data.frame( x= ymd( egarch_model$roll.pred$x),
reallized_vol= forecasting$real,
rf.predicted_vol= ensemble_rf$predicted)
rf.g<- ggplot(melt(data =  tmp, id.var='x'), aes( x=x, y= value))+
geom_line(aes(colour= variable, group= variable))+
scale_color_manual(values = c('grey', 'dark green'))+
ylab('daily volatility')+
xlab('date index')+
theme(legend.title= element_blank())+
ggtitle('RandomForest ensemble prediction')
jpeg('RF_ENSEMBLE.jpeg')
rf.g
dev.off()
rf<- list()
rf$model<- ensemble_rf
rf$plot<- rf.g
rf$MSE<- mean( ensemble_rf$mse)
rf$roll.pred<- tmp
save(rf, file='rf')
rm(list=ls())
setwd('/Users/Eric/Desktop/Vol_prediction')
load('egarch_model')
load('arfima_egarch_model')
load('rgarch_model')
library(lubridate)
library(xts)
library(zoo)
SPXdata<- read.csv('SPX_rvol.csv')
SPXdata$SPX2.rvol<- sqrt( SPXdata$SPX2.rv)
rownames(SPXdata)<- ymd( SPXdata$DATE)
## VX_lag1 contains the information of implied vol with 1 day lag
VX<- read.csv('VX.csv')
VX$DATE<- ymd(VX$DATE)
rownames(VX)<- ymd(VX$DATE)
VX$DATE<- NULL
VX<- as.xts(VX)
VX_lag1<- lag( VX, 1, na.pad = TRUE)
VX_lag1<- as.data.frame(VX_lag1)
VX_lag1$DATE<- ymd(rownames(VX_lag1))
VX_lag1<- VX_lag1[ complete.cases(VX_lag1), ]
## forecasting is the time series 1 day ahead forecasting
forecasting<- data.frame(DATE=ymd(egarch_model$roll.pred$x),
real= egarch_model$roll.pred$realized_vol,
egarchPred= egarch_model$roll.pred$egarch.predicted_vol,
rgarchPred= rgarch_model$roll.pred$rgarch.prediction_vol,
arfima_egarchPred= arfima_egarch_model$roll.pred$arfima_egarch.predicted_vol)
## combine the VX_lag1 and forecasting
fore_vx<- merge( VX_lag1, forecasting, by='DATE')
fore_vx<- fore_vx[complete.cases(fore_vx),]
rownames(fore_vx)<- ymd(fore_vx$DATE)
fore_vx$DATE<- NULL
fore_vx<- as.xts( fore_vx)
tmp<- list()
tmp$rvol<- fore_vx$real
fore_vx$real<- NULL
tmp$x<- fore_vx
fore_vx<- tmp
## rf ensemble to get an average forecasting ( not successful)
library(randomForest)
# # cv<- rfcv(trainx = fore_vx$x, trainy = fore_vx$rvol, cv.fold = 5)
#
# ensemble_rf<- randomForest(x = fore_vx$x ,
#                            y= fore_vx$rvol,
#                            ntree= 1000,
#                            importance= TRUE)
#
# plot(ensemble_rf)
# varImpPlot(ensemble_rf)
# var_selection<- c( 'rgarchPred',
#                    'arfima_egarchPred',
#                    'VIX.Close',
#                    'egarchPred',
#                    'VIX.Open',
#                    'VX.C5_2',
#                    'VX.C2_1',
#                    'VX.C1_0',
#                    'VX4.OpenInt_lag1',
#                    'VX1.Settle')
# tmp<- fore_vx$x[,  var_selection]
#
# ensemble_rf<- randomForest(x = tmp ,
#                            y= fore_vx$rvol,
#                            ntree= 1000,
#                            importance= TRUE)
#
## rf ensemble the time series forecasting to get an average
forecasting$DATE<-NULL
ensemble_rf<- randomForest(real~.,
data = forecasting,
ntree= 500,
mtry= 2,
importance= TRUE)
ensemble_rf
plot(ensemble_rf)
ensemble_rf$mse
ensemble_rf$rsq
library(ggplot2)
library(reshape2)
tmp<- data.frame( x= ymd( egarch_model$roll.pred$x),
reallized_vol= forecasting$real,
rf.predicted_vol= ensemble_rf$predicted)
rf.g<- ggplot(melt(data =  tmp, id.var='x'), aes( x=x, y= value))+
geom_line(aes(colour= variable, group= variable))+
scale_color_manual(values = c('grey', 'dark green'))+
ylab('daily volatility')+
xlab('date index')+
theme(legend.title= element_blank())+
ggtitle('RandomForest ensemble prediction')
jpeg('RF_ENSEMBLE.jpeg')
rf.g
dev.off()
rf<- list()
rf$model<- ensemble_rf
rf$plot<- rf.g
rf$MSE<- mean( ensemble_rf$mse)
rf$roll.pred<- tmp
save(rf, file='rf')
ensemble_rf
rm(list=ls())
setwd('/Users/Eric/Desktop/Vol_prediction')
load('egarch_model')
load('arfima_egarch_model')
load('rgarch_model')
library(lubridate)
library(xts)
library(zoo)
SPXdata<- read.csv('SPX_rvol.csv')
SPXdata$SPX2.rvol<- sqrt( SPXdata$SPX2.rv)
rownames(SPXdata)<- ymd( SPXdata$DATE)
## VX_lag1 contains the information of implied vol with 1 day lag
VX<- read.csv('VX.csv')
VX$DATE<- ymd(VX$DATE)
rownames(VX)<- ymd(VX$DATE)
VX$DATE<- NULL
VX<- as.xts(VX)
VX_lag1<- lag( VX, 1, na.pad = TRUE)
VX_lag1<- as.data.frame(VX_lag1)
VX_lag1$DATE<- ymd(rownames(VX_lag1))
VX_lag1<- VX_lag1[ complete.cases(VX_lag1), ]
## forecasting is the time series 1 day ahead forecasting
forecasting<- data.frame(DATE=ymd(egarch_model$roll.pred$x),
real= egarch_model$roll.pred$realized_vol,
egarchPred= egarch_model$roll.pred$egarch.predicted_vol,
rgarchPred= rgarch_model$roll.pred$rgarch.prediction_vol,
arfima_egarchPred= arfima_egarch_model$roll.pred$arfima_egarch.predicted_vol)
## combine the VX_lag1 and forecasting
fore_vx<- merge( VX_lag1, forecasting, by='DATE')
fore_vx<- fore_vx[complete.cases(fore_vx),]
rownames(fore_vx)<- ymd(fore_vx$DATE)
fore_vx$DATE<- NULL
fore_vx<- as.xts( fore_vx)
tmp<- list()
tmp$rvol<- fore_vx$real
fore_vx$real<- NULL
tmp$x<- fore_vx
fore_vx<- tmp
## rf ensemble to get an average forecasting ( not successful)
library(randomForest)
# # cv<- rfcv(trainx = fore_vx$x, trainy = fore_vx$rvol, cv.fold = 5)
#
# ensemble_rf<- randomForest(x = fore_vx$x ,
#                            y= fore_vx$rvol,
#                            ntree= 1000,
#                            importance= TRUE)
#
# plot(ensemble_rf)
# varImpPlot(ensemble_rf)
# var_selection<- c( 'rgarchPred',
#                    'arfima_egarchPred',
#                    'VIX.Close',
#                    'egarchPred',
#                    'VIX.Open',
#                    'VX.C5_2',
#                    'VX.C2_1',
#                    'VX.C1_0',
#                    'VX4.OpenInt_lag1',
#                    'VX1.Settle')
# tmp<- fore_vx$x[,  var_selection]
#
# ensemble_rf<- randomForest(x = tmp ,
#                            y= fore_vx$rvol,
#                            ntree= 1000,
#                            importance= TRUE)
#
## rf ensemble the time series forecasting to get an average
forecasting$DATE<-NULL
ensemble_rf<- randomForest(real~.,
data = forecasting,
ntree= 1000,
mtry= 2,
importance= TRUE)
ensemble_rf
plot(ensemble_rf)
ensemble_rf$mse
ensemble_rf$rsq
library(ggplot2)
library(reshape2)
tmp<- data.frame( x= ymd( egarch_model$roll.pred$x),
reallized_vol= forecasting$real,
rf.predicted_vol= ensemble_rf$predicted)
rf.g<- ggplot(melt(data =  tmp, id.var='x'), aes( x=x, y= value))+
geom_line(aes(colour= variable, group= variable))+
scale_color_manual(values = c('grey', 'dark green'))+
ylab('daily volatility')+
xlab('date index')+
theme(legend.title= element_blank())+
ggtitle('RandomForest ensemble prediction')
jpeg('RF_ENSEMBLE.jpeg')
rf.g
dev.off()
rf<- list()
rf$model<- ensemble_rf
rf$plot<- rf.g
rf$MSE<- mean( ensemble_rf$mse)
rf$roll.pred<- tmp
save(rf, file='rf')
ensemble_rf
source('~/Desktop/Vol_prediction/ensemble_RF.R', echo=TRUE)
ensemble_rf
source('~/Desktop/Vol_prediction/ensemble_RF.R', echo=TRUE)
ensemble_rf
source('~/Desktop/Vol_prediction/ensemble_RF.R', echo=TRUE)
ensemble_rf
source('~/Desktop/Vol_prediction/ensemble_RF.R', echo=TRUE)
ensemble_rf
rf$MSE
mean((rf$roll.pred$reallized_vol- rf$roll.pred$rf.predicted_vol)^2)
(1.35-1.12)/1.35
